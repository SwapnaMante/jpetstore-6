pipeline {

agent any

environment {
   
    ArtifactID = readMavenPom().getArtifactId()
    VERSION = readMavenPom().getVersion()
	scannerHome ="C:/Users/smante/Documents/sonar-scanner/sonar-scanner-4.7.0.2747-windows/bin"
	NEXUS_VERSION = "nexus3"
    NEXUS_PROTOCOL = "http"
    NEXUS_URL = "localhost:8081"
    NEXUS_REPOSITORY = "maven-nexus-repo"
    NEXUS_CREDENTIAL_ID = "Nexus"
    }
	tools{
	maven 'Maven 3.8.5'
	}
stages {
        
  stage('PrintVariables') {
            steps {
				echo "${ArtifactID}"
                echo "${VERSION}"
            }

        }	
  stage('Build') {
            steps {
			   
               bat 'mvn clean package'
            }
        }
  stage('Sonar Analysis')	{
  
			steps {
				withSonarQubeEnv('Sonarqube-8.9.8') {
				bat '''C:/Users/smante/Documents/sonar-scanner/sonar-scanner-4.7.0.2747-windows/bin/sonar-scanner \
			    -Dsonar.java.binaries=src/main/java/ \
				-Dsonar.projectName=jpetstore-6 \
			    -Dsonar.projectKey=jpetstore-6 \
			    -Dsonar.sources=.'''
    }
	
	}
}
stage("Publish to Nexus Repository Manager") {
            steps {
                script {
                    pom = readMavenPom file: "pom.xml";
                    filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
                    echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                    artifactPath = filesByGlob[0].path;
                    artifactExists = fileExists artifactPath;
                    if(artifactExists) {
                        echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";
                        nexusArtifactUploader(
                            nexusVersion: NEXUS_VERSION,
                            protocol: NEXUS_PROTOCOL,
                            nexusUrl: NEXUS_URL,
                            groupId: pom.groupId,
                            version: pom.version,
                            repository: NEXUS_REPOSITORY,
                            credentialsId: NEXUS_CREDENTIAL_ID,
                            artifacts: [
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: artifactPath,
                                type: pom.packaging],
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: "pom.xml",
                                type: "pom"]
                            ]
                        );
                    } else {
                        error "*** File: ${artifactPath}, could not be found";
                    }
                }
            }
        }

}
}